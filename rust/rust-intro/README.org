* Rust実践入門

** memo

- Rustの特徴
  - Rustは高速だが脆弱性を持つ言語に取って代わる言語
  - 堅牢かつ高速
  - FFIで呼び出し可能なので一部機能をRustで書き換えて少しずつ性能上のボトルネックを置き換えることも可能
  - 関数型プログラミング言語にあるような特徴を持つ
    - 代数的データ型
    - パターンマッチ
    - 型クラスによる多相関数
    - コンパイラによる型推論
  - GCがなく，複雑なランタイムを持たない
    - OSなしで実行可能なソフトも開発可
    - IoTやWebで注目
  - LLVMを使用している
  - 静的型付け
    - コンパイル時に値の型を決定する
    - 型推論が出来るので型宣言(型注釈)は省略可能
  - ゼロコスト抽象化
  - 安全なシステムプログラミングが可能
    - コンパイラによる静的解析で安全性を解決している
  - C--が現在でも必要なのは低レベルシステムソフト，ハイパフォーマンスなアプリ，組み込みなどリソースが少ない環境
  - 型安全性
    - 未定義動作をしないよう言語が定義されているということ
    - シンタックス
      - プログラムを記述する規則
    - セマンティック
      - プログラムの意味
  - プラットフォームのサポートのレベルをtierで分けており，tier1からtier3まである
- Rustの環境について
  - toolchainはRustで書かれたソースコードをコンパイルするのに使われるツール群の総称
    - =rustc=
      - Rustコンパイラ
      - リンカがオブジェクトファイルやライブラリを結合してABIに準拠した実行可能ファイルを生成する
    - =cargo=
      - ビルドマネージャ兼パッケージマネージャ
      - ~cargo -nightly -V~ などでstable以外のversionを確認可能
    - =std=
      - 標準ライブラリ
  - =rustup=
    - =rustup= を使用するとstableだけでなく，nightlyも使える
    - RLSなどの開発支援ツールが簡単にインストール可能
    - クロスコンパイル環境も容易に構築可能

** question

